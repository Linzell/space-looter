name: Deploy to Netlify

on:
  push:
    tags: ["v*"] # Trigger on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-system-deps
        with:
          rust-targets: "wasm32-unknown-unknown"
          cache-key-suffix: "deploy"

      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: "latest"

      - name: Build WASM package
        run: |
          echo "üöÄ Building Space Looter for tag: ${{ github.ref_name }}"
          chmod +x build-web.sh
          ./build-web.sh

      - name: Add version info and show statistics
        run: |
          echo "üìÅ Adding version info to HTML..."
          sed -i "s|<title>Space Looter</title>|<title>Space Looter ${{ github.ref_name }}</title>|g" dist/index.html

          echo "üìä Build statistics:"
          du -h dist/*

      - name: Prepare deployment files
        run: |
          echo "üßπ Preparing deployment files..."

          # Create a temporary directory for deploy files in main repo
          mkdir -p deploy-staging

          # Copy built files from dist
          echo "üìÅ Copying built files..."
          cp -r dist/* deploy-staging/

          # Copy Netlify configuration files
          echo "‚öôÔ∏è Copying configuration files..."
          cp netlify.toml deploy-staging/
          cp netlify-build.sh deploy-staging/

          # Copy additional configuration files
          cp README.md deploy-staging/
          cp .gitignore deploy-staging/

          # Copy .github directory for GitHub integration
          if [ -d ".github" ]; then
            cp -r .github deploy-staging/
            echo "‚úÖ .github directory copied"
          else
            echo "‚ö†Ô∏è  .github directory not found"
          fi

          # Make netlify build script executable
          chmod +x deploy-staging/netlify-build.sh

          # Create deployment info
          echo "üìù Creating deployment documentation..."
          cd deploy-staging
          echo "# Space Looter Deployment" > DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "**Version:** ${{ github.ref_name }}" >> DEPLOYMENT.md
          echo "**Built at:** $(date -u)" >> DEPLOYMENT.md
          echo "**Commit:** ${{ github.sha }}" >> DEPLOYMENT.md
          echo "**Build:** GitHub Actions #${{ github.run_number }}" >> DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "## About This Branch" >> DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "This is the \`deploy\` branch containing pre-built files for Netlify deployment." >> DEPLOYMENT.md
          echo "Files are automatically built and deployed by GitHub Actions." >> DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "### Key Files:" >> DEPLOYMENT.md
          echo "- \`index.html\` - Game entry point" >> DEPLOYMENT.md
          echo "- \`space_looter.js\` - Generated JavaScript" >> DEPLOYMENT.md
          echo "- \`space_looter_bg.wasm\` - Game WebAssembly binary" >> DEPLOYMENT.md
          echo "- \`netlify.toml\` - Netlify configuration" >> DEPLOYMENT.md
          echo "- \`assets/\` - Game assets (audio, fonts, icons)" >> DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "## Files" >> DEPLOYMENT.md
          echo "\`\`\`" >> DEPLOYMENT.md
          ls -la >> DEPLOYMENT.md
          echo "\`\`\`" >> DEPLOYMENT.md
          cd ..

          echo "‚úÖ Deploy files prepared in deploy-staging/"

      - name: Deploy to deploy branch
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Store the absolute path to deploy-staging
          STAGING_DIR="$(pwd)/deploy-staging"
          echo "üìç Staging directory: $STAGING_DIR"

          # Verify staging directory exists
          if [ ! -d "$STAGING_DIR" ]; then
            echo "‚ùå deploy-staging directory not found at $STAGING_DIR"
            ls -la
            exit 1
          fi

          # Fetch all branches to get deploy branch
          git fetch origin

          # Check if deploy branch exists
          if git ls-remote --exit-code --heads origin deploy >/dev/null 2>&1; then
            echo "üì• Deploy branch exists, checking it out..."
            git checkout deploy

            # Clean existing files (preserve .git)
            find . -maxdepth 1 -not -name '.git' -not -name '.' -not -name '..' -exec rm -rf {} + 2>/dev/null || true
          else
            echo "üÜï Creating new orphan deploy branch..."
            git checkout --orphan deploy
            git rm -rf . 2>/dev/null || true
          fi

          # Copy files from staging directory to current directory
          echo "üìÅ Copying deployment files from $STAGING_DIR..."
          cp -r "$STAGING_DIR"/* . 2>/dev/null || true
          cp -r "$STAGING_DIR"/.[!.]* . 2>/dev/null || true

          # Add all files
          git add .

          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "No changes to deploy"
          else
            # Commit the changes
            git commit -m "Deploy ${{ github.ref_name }}

            - Built from commit: ${{ github.sha }}
            - Build #${{ github.run_number }}
            - Generated at: $(date -u)"

            # Push to deploy branch
            git push origin deploy
            echo "‚úÖ Deployed ${{ github.ref_name }} to deploy branch"
          fi
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** deploy" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Files deployed:" >> $GITHUB_STEP_SUMMARY
          echo "- index.html" >> $GITHUB_STEP_SUMMARY
          echo "- space_looter.js" >> $GITHUB_STEP_SUMMARY
          echo "- space_looter_bg.wasm" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Netlify will auto-deploy from the 'deploy' branch**" >> $GITHUB_STEP_SUMMARY
