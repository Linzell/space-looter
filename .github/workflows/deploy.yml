name: Deploy to Netlify

on:
  push:
    tags: ["v*"] # Trigger on version tags like v1.0.0, v1.2.3, etc.

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-system-deps
        with:
          rust-targets: "wasm32-unknown-unknown"
          cache-key-suffix: "deploy"

      - name: Install wasm-pack
        uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: "0.13.1"

      - name: Check wasm-bindgen versions
        run: |
          echo "üîç Checking wasm-bindgen version consistency..."

          # Get version from Cargo.toml (handle both "0.2" and "0.2.95" formats)
          CARGO_VERSION=$(grep 'wasm-bindgen = ' Cargo.toml | head -1 | sed 's/.*"\([^"]*\)".*/\1/')
          echo "üì¶ Cargo.toml wasm-bindgen version: $CARGO_VERSION"

          # Check wasm-pack version
          WASM_PACK_VERSION=$(wasm-pack --version | cut -d' ' -f2)
          echo "üõ†Ô∏è wasm-pack version: $WASM_PACK_VERSION"

          # Skip wasm-bindgen CLI installation for shortened versions
          if [[ "$CARGO_VERSION" =~ ^[0-9]+\.[0-9]+$ ]]; then
            echo "‚ö†Ô∏è Shortened version format detected ($CARGO_VERSION). Using wasm-pack's bundled wasm-bindgen."
            echo "‚úÖ Will use --mode no-install to ensure wasm-pack uses its own version"
          else
            # Ensure wasm-bindgen CLI version matches for full versions
            if ! command -v wasm-bindgen &> /dev/null; then
              echo "üì• Installing wasm-bindgen CLI to match Cargo version..."
              cargo install wasm-bindgen-cli --version "$CARGO_VERSION"
            else
              CLI_VERSION=$(wasm-bindgen --version | cut -d' ' -f2)
              if [ "$CLI_VERSION" != "$CARGO_VERSION" ]; then
                echo "‚ö†Ô∏è Version mismatch detected. Reinstalling wasm-bindgen CLI..."
                cargo install wasm-bindgen-cli --version "$CARGO_VERSION" --force
              else
                echo "‚úÖ wasm-bindgen versions match: $CARGO_VERSION"
              fi
            fi
          fi

      - name: Build WASM package
        run: |
          echo "üöÄ Building Space Looter for tag: ${{ github.ref_name }}"
          echo "üßπ Force clean rebuild..."

          # Remove any existing build artifacts
          rm -rf pkg/
          rm -rf dist/
          rm -rf target/wasm32-unknown-unknown/

          # Clear cargo cache for wasm target
          cargo clean --target wasm32-unknown-unknown

          echo "üîß Building with exact local configuration..."
          echo "Using wasm-pack 0.13.1 + wasm-bindgen 0.2.100"

          chmod +x build-web.sh
          ./build-web.sh

      - name: Verify build output
        run: |
          echo "üîç Verifying build output..."
          echo "Contents of dist directory:"
          ls -la dist/
          echo ""

          # Check for critical files
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå ERROR: index.html missing from build"
            exit 1
          fi

          if [ ! -f "dist/space_looter.js" ]; then
            echo "‚ùå ERROR: space_looter.js missing from build"
            exit 1
          fi

          if [ ! -f "dist/space_looter_bg.wasm" ]; then
            echo "‚ùå ERROR: space_looter_bg.wasm missing from build"
            echo "Build may have failed. Checking pkg directory:"
            ls -la pkg/ || echo "pkg directory not found"
            exit 1
          fi

          echo "‚úÖ All critical files present in build"

      - name: Add version info and show statistics
        run: |
          echo "üìÅ Adding version info to HTML..."
          sed -i "s|<title>Space Looter</title>|<title>Space Looter ${{ github.ref_name }}</title>|g" dist/index.html

          echo "üìä Build statistics:"
          du -h dist/*

          echo "üîç Final dist directory check before deployment:"
          ls -la dist/

          # Use URL parameter cache busting instead of file renaming
          # This preserves wasm-bindgen internal references
          echo "üîÑ Adding URL parameter cache busting..."
          TIMESTAMP=$(date +%s)
          BUILD_HASH=$(echo "${{ github.sha }}" | cut -c1-8)
          BUILD_NUMBER="${{ github.run_number }}"
          CACHE_BUST="${BUILD_HASH}-${BUILD_NUMBER}-${TIMESTAMP}"

          cd dist
          echo "üéØ Cache bust identifier: ${CACHE_BUST}"

          # Update HTML file to use URL parameters for cache busting
          # This preserves the original filenames that wasm-bindgen expects
          sed -i "s|await import('./space_looter\.js')|await import('./space_looter.js?v=${CACHE_BUST}')|g" index.html
          echo "‚úÖ HTML updated to use URL parameter cache busting"

          # Add build info to HTML for verification
          sed -i "s|</head>|  <meta name=\"build-hash\" content=\"${BUILD_HASH}\">\n  <meta name=\"build-number\" content=\"${BUILD_NUMBER}\">\n  <meta name=\"build-timestamp\" content=\"${TIMESTAMP}\">\n  <meta name=\"cache-bust\" content=\"${CACHE_BUST}\">\n</head>|" index.html
          echo "‚úÖ Build metadata added to HTML"

          cd ..

          echo "üîç Files ready for deployment (with original names preserved):"
          ls -la dist/

          # Debug: Show what the HTML import looks like after cache busting
          echo "üîç Checking HTML import after cache busting:"
          if [ -f dist/index.html ]; then
            echo "Looking for import statement:"
            grep -n "import.*space_looter" dist/index.html || echo "No import statement found"
            echo ""
            echo "Checking for cache-bust parameter:"
            grep -n "?v=" dist/index.html || echo "No cache-bust parameter found"
            echo ""
            echo "Showing relevant HTML section:"
            grep -A 5 -B 5 "space_looter" dist/index.html || echo "No space_looter references found"
          fi

      - name: Prepare for deployment
        run: |
          echo "üßπ Preparing for deployment..."

          # Verify source files exist before deployment
          echo "üîç Verifying source files..."
          echo "Contents of dist directory:"
          ls -la dist/

          echo "üîç Critical files check:"
          echo "  index.html: $([ -f dist/index.html ] && echo "‚úÖ EXISTS" || echo "‚ùå MISSING")"
          echo "  space_looter.js: $([ -f dist/space_looter.js ] && echo "‚úÖ EXISTS" || echo "‚ùå MISSING")"
          echo "  space_looter_bg.wasm: $([ -f dist/space_looter_bg.wasm ] && echo "‚úÖ EXISTS" || echo "‚ùå MISSING")"
          echo "  netlify.toml: $([ -f netlify.toml ] && echo "‚úÖ EXISTS" || echo "‚ùå MISSING")"

          if [ ! -f "dist/index.html" ] || [ ! -f "dist/space_looter.js" ] || [ ! -f "dist/space_looter_bg.wasm" ]; then
            echo "‚ùå ERROR: Critical files missing from dist directory"
            exit 1
          fi

          echo "‚úÖ All source files verified"

          # Create a temporary directory to store files before branch switch
          echo "üì¶ Creating temporary storage for deployment files..."
          mkdir -p /tmp/deploy-files

          # Copy all files we need to the temporary directory
          echo "üìÅ Storing build files..."
          cp -r dist/* /tmp/deploy-files/
          echo "‚úÖ Build files stored"

          echo "üìÅ Storing config files..."
          cp netlify.toml /tmp/deploy-files/ 2>/dev/null && echo "‚úÖ netlify.toml stored" || echo "‚ö†Ô∏è netlify.toml not found"
          cp netlify-build.sh /tmp/deploy-files/ 2>/dev/null && echo "‚úÖ netlify-build.sh stored" || echo "‚ö†Ô∏è netlify-build.sh not found"
          cp README.md /tmp/deploy-files/ 2>/dev/null && echo "‚úÖ README.md stored" || echo "‚ö†Ô∏è README.md not found"
          cp .gitignore /tmp/deploy-files/ 2>/dev/null && echo "‚úÖ .gitignore stored" || echo "‚ö†Ô∏è .gitignore not found"

          echo "üìÅ Storing .github directory to prevent CI breakage..."
          cp -r .github /tmp/deploy-files/ 2>/dev/null && echo "‚úÖ .github directory stored" || echo "‚ö†Ô∏è .github directory not found"

          echo "üì¶ Files stored in temporary directory:"
          ls -la /tmp/deploy-files/

      - name: Deploy to deploy branch
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Fetch all branches
          git fetch origin

          # Check if deploy branch exists
          if git ls-remote --exit-code --heads origin deploy >/dev/null 2>&1; then
            echo "üì• Deploy branch exists, checking it out..."
            git checkout -B deploy origin/deploy
          else
            echo "üÜï Creating new orphan deploy branch..."
            git checkout --orphan deploy
            git rm -rf . 2>/dev/null || true
          fi

          # Clean existing files (preserve .git)
          find . -maxdepth 1 -not -name '.git' -not -name '.' -not -name '..' -exec rm -rf {} + 2>/dev/null || true

          echo "üîç Verifying temporary storage contents:"
          ls -la /tmp/deploy-files/

          # Specific WASM file verification before copy
          if [ -f /tmp/deploy-files/space_looter_bg.wasm ]; then
            echo "üîç WASM file in temporary storage:"
            echo "  Size: $(du -h /tmp/deploy-files/space_looter_bg.wasm | cut -f1)"
            echo "  Size (bytes): $(wc -c < /tmp/deploy-files/space_looter_bg.wasm)"
            echo "  Modified: $(stat -c %y /tmp/deploy-files/space_looter_bg.wasm)"
            echo "  MD5: $(md5sum /tmp/deploy-files/space_looter_bg.wasm | cut -d' ' -f1)"
          else
            echo "‚ùå WASM file missing from temporary storage!"
            exit 1
          fi

          # Copy all files from temporary storage
          echo "üì¶ Copying files..."
          cp -r /tmp/deploy-files/* . && echo "‚úÖ All files copied" || { echo "‚ùå Failed to copy files"; exit 1; }

          # Make netlify build script executable if it exists
          chmod +x netlify-build.sh 2>/dev/null || echo "‚ö†Ô∏è netlify-build.sh not found or already executable"

          # Create deployment info
          echo "üìù Creating deployment documentation..."
          echo "# Space Looter Deployment" > DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "**Version:** ${{ github.ref_name }}" >> DEPLOYMENT.md
          echo "**Built at:** $(date -u)" >> DEPLOYMENT.md
          echo "**Commit:** ${{ github.sha }}" >> DEPLOYMENT.md
          echo "**Build:** GitHub Actions #${{ github.run_number }}" >> DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "## About This Branch" >> DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "This is the \`deploy\` branch containing pre-built files for Netlify deployment." >> DEPLOYMENT.md
          echo "Files are automatically built and deployed by GitHub Actions." >> DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "### Key Files:" >> DEPLOYMENT.md
          echo "- \`index.html\` - Game entry point" >> DEPLOYMENT.md
          echo "- \`space_looter.js\` - Generated JavaScript" >> DEPLOYMENT.md
          echo "- \`space_looter_bg.wasm\` - Game WebAssembly binary" >> DEPLOYMENT.md
          echo "- \`netlify.toml\` - Netlify configuration" >> DEPLOYMENT.md
          echo "- \`assets/\` - Game assets (audio, fonts, icons)" >> DEPLOYMENT.md
          echo "" >> DEPLOYMENT.md
          echo "## Files" >> DEPLOYMENT.md
          echo "\`\`\`" >> DEPLOYMENT.md
          ls -la >> DEPLOYMENT.md
          echo "\`\`\`" >> DEPLOYMENT.md

          # Debug: Show what files are actually in the deploy branch
          echo "üîç Files in deploy branch after copy:"
          ls -la
          echo ""
          echo "üîç Checking for critical files:"
          echo "  index.html: $([ -f index.html ] && echo "‚úÖ EXISTS" || echo "‚ùå MISSING")"
          echo "  space_looter.js: $([ -f space_looter.js ] && echo "‚úÖ EXISTS" || echo "‚ùå MISSING")"
          echo "  space_looter_bg.wasm: $([ -f space_looter_bg.wasm ] && echo "‚úÖ EXISTS" || echo "‚ùå MISSING")"
          echo "  netlify.toml: $([ -f netlify.toml ] && echo "‚úÖ EXISTS" || echo "‚ùå MISSING")"

          # Detailed WASM file verification
          if [ -f space_looter_bg.wasm ]; then
            echo "üîç WASM file details:"
            echo "  Size: $(du -h space_looter_bg.wasm | cut -f1)"
            echo "  Size (bytes): $(wc -c < space_looter_bg.wasm)"
            echo "  Modified: $(stat -c %y space_looter_bg.wasm)"
            echo "  MD5: $(md5sum space_looter_bg.wasm | cut -d' ' -f1)"
          else
            echo "‚ùå WASM file missing!"
          fi

          # Compare with temporary storage
          if [ -f /tmp/deploy-files/space_looter_bg.wasm ]; then
            echo "üîç Comparing WASM files:"
            echo "  Temp file MD5: $(md5sum /tmp/deploy-files/space_looter_bg.wasm | cut -d' ' -f1)"
            if [ -f space_looter_bg.wasm ]; then
              echo "  Deployed file MD5: $(md5sum space_looter_bg.wasm | cut -d' ' -f1)"
              if cmp -s space_looter_bg.wasm /tmp/deploy-files/space_looter_bg.wasm; then
                echo "  ‚úÖ WASM files match"
              else
                echo "  ‚ùå WASM files differ!"
              fi
            fi
          fi

          # Verify all critical files are present
          if [ ! -f index.html ] || [ ! -f space_looter.js ] || [ ! -f space_looter_bg.wasm ]; then
            echo "‚ùå ERROR: Critical files missing after copy!"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

          # Show final deployed files
          echo "üéØ Final deployed files (with URL parameter cache busting):"
          echo "  HTML: $(ls index.html 2>/dev/null || echo "MISSING")"
          echo "  JS: $(ls space_looter.js 2>/dev/null || echo "MISSING")"
          echo "  WASM: $(ls space_looter_bg.wasm 2>/dev/null || echo "MISSING")"
          echo "  Assets: $([ -d assets ] && echo "‚úÖ Directory exists" || echo "‚ùå Missing")"

          # Show build metadata for verification
          CACHE_BUST_ID=$(grep -o 'cache-bust.*content="[^"]*"' index.html | sed 's/.*content="\([^"]*\)".*/\1/' | head -1)
          echo "üè∑Ô∏è Build metadata:"
          echo "  Git hash: $(echo "${{ github.sha }}" | cut -c1-8)"
          echo "  Build number: ${{ github.run_number }}"
          echo "  Cache bust ID: ${CACHE_BUST_ID:-"not found"}"

          # Add all files
          git add .

          # Check if there are any changes to commit
          if git diff --cached --quiet; then
            echo "No changes to deploy"
          else
            # Show what's being committed
            echo "üîç Files being committed:"
            git diff --cached --name-only

            # Commit the changes
            git commit -m "Deploy ${{ github.ref_name }}

            - Built from commit: ${{ github.sha }}
            - Build #${{ github.run_number }}
            - Generated at: $(date -u)"

            # Push to deploy branch
            git push origin deploy
            echo "‚úÖ Deployed ${{ github.ref_name }} to deploy branch"

            # Final verification
            echo "üîç Final deploy branch status:"
            git ls-tree --name-only HEAD

            # Check if deploy branch exists and handle accordingly
            if git ls-remote --exit-code --heads origin deploy >/dev/null 2>&1; then
              echo "üì• Fetching existing deploy branch..."
              git fetch origin deploy
              git checkout -B deploy origin/deploy
            else
              echo "üÜï Creating new orphan deploy branch..."
              git checkout --orphan deploy
            fi

            # Add all files
            git add .

            # Check if there are any changes to commit
            if git diff --cached --quiet; then
              echo "No changes to deploy"
            else
              # Show what's being committed
              echo "üîç Files being committed:"
              git diff --cached --name-only

              # Commit the changes
              git commit -m "Deploy ${{ github.ref_name }}

              - Built from commit: ${{ github.sha }}
              - Build #${{ github.run_number }}
              - Generated at: $(date -u)"

              # Push to deploy branch
              git push origin deploy
              echo "‚úÖ Deployed ${{ github.ref_name }} to deploy branch"

              # Trigger Netlify cache purge and rebuild
              echo "üîÑ Triggering Netlify cache purge..."

              # Create a cache-busting commit to force Netlify to rebuild
              echo "cache-bust: $(date +%s)" > .netlify-cache-bust
              git add .netlify-cache-bust
              git commit -m "Force Netlify cache purge - Build #${{ github.run_number }}"
              git push origin deploy

              echo "‚úÖ Cache purge commit pushed to force Netlify rebuild"
              echo "üåê Netlify will detect the new commit and redeploy automatically"
              echo "‚è≥ Wait 2-3 minutes for Netlify to rebuild and purge CDN cache"
            fi
          fi

          # Final verification from deploy directory
          echo "üîç Final verification from deploy directory:"
          pwd
          ls -la

          # Return to original workspace to avoid workflow cleanup issues
          cd "${GITHUB_WORKSPACE}"
          echo "üè† Returned to original workspace for cleanup"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create deployment summary
        run: |
          echo "## üöÄ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** deploy" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          echo "**Build:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** $(echo "${{ github.sha }}" | cut -c1-8)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Files deployed with URL parameter cache busting:" >> $GITHUB_STEP_SUMMARY
          echo "- index.html (with build metadata and cache-busted imports)" >> $GITHUB_STEP_SUMMARY
          echo "- space_looter.js (original filename preserved)" >> $GITHUB_STEP_SUMMARY
          echo "- space_looter_bg.wasm (original filename preserved)" >> $GITHUB_STEP_SUMMARY
          echo "- .netlify-cache-bust (forces rebuild)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Netlify cache purge triggered - rebuilding now**" >> $GITHUB_STEP_SUMMARY
          echo "‚è≥ **Wait 2-3 minutes for CDN cache to clear**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Verification:" >> $GITHUB_STEP_SUMMARY
          echo "1. Check HTML source for build metadata and ?v= parameters" >> $GITHUB_STEP_SUMMARY
          echo "2. Files keep original names but have cache-busted URLs" >> $GITHUB_STEP_SUMMARY
          echo "3. WASM file should be ~30MB and load without binding errors" >> $GITHUB_STEP_SUMMARY
