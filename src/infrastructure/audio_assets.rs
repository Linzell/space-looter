// Auto-generated audio asset list for Space Looter
// Generated by scripts/download_audio_assets.py

use crate::domain::entities::audio::{AudioAsset, AudioAssetType, AudioCategory};
use crate::domain::services::audio_service::DefaultAudioService;
use crate::presentation::audio_integration::AudioEventRegistry;
use uuid::Uuid;

/// Load all audio assets into the audio service
pub fn load_all_audio_assets(
    audio_service: &mut DefaultAudioService,
    registry: &mut AudioEventRegistry,
) {
    // Movement assets
    load_movement_assets(audio_service, registry);

    // Dice assets
    load_dice_assets(audio_service, registry);

    // Event assets
    load_event_assets(audio_service, registry);

    // UI assets
    load_ui_assets(audio_service, registry);

    // Music assets
    load_music_assets(audio_service, registry);

    // Environmental assets
    load_environmental_assets(audio_service, registry);

    // Resource assets
    load_resource_assets(audio_service, registry);
}

/// Load movement-related audio assets
fn load_movement_assets(
    audio_service: &mut DefaultAudioService,
    registry: &mut AudioEventRegistry,
) {
    // Successful movement sound
    let movement_success_asset = AudioAsset::new(
        "movement_success".to_string(),
        "assets/audio/sfx/movement/movement_success.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Movement,
    );
    let movement_success_id = movement_success_asset.id();
    audio_service.add_asset(movement_success_asset);
    registry.register_asset("movement_success".to_string(), movement_success_id);

    // Blocked movement sound
    let movement_blocked_asset = AudioAsset::new(
        "movement_blocked".to_string(),
        "assets/audio/sfx/movement/movement_blocked.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Movement,
    );
    let movement_blocked_id = movement_blocked_asset.id();
    audio_service.add_asset(movement_blocked_asset);
    registry.register_asset("movement_blocked".to_string(), movement_blocked_id);

    // Footstep on metal surface
    let footstep_metal_asset = AudioAsset::new(
        "footstep_metal".to_string(),
        "assets/audio/sfx/movement/footstep_metal.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Movement,
    );
    let footstep_metal_id = footstep_metal_asset.id();
    audio_service.add_asset(footstep_metal_asset);
    registry.register_asset("footstep_metal".to_string(), footstep_metal_id);

    // Footstep on rock surface
    let footstep_rock_asset = AudioAsset::new(
        "footstep_rock".to_string(),
        "assets/audio/sfx/movement/footstep_rock.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Movement,
    );
    let footstep_rock_id = footstep_rock_asset.id();
    audio_service.add_asset(footstep_rock_asset);
    registry.register_asset("footstep_rock".to_string(), footstep_rock_id);

    // Footstep on sand surface
    let footstep_sand_asset = AudioAsset::new(
        "footstep_sand".to_string(),
        "assets/audio/sfx/movement/footstep_sand.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Movement,
    );
    let footstep_sand_id = footstep_sand_asset.id();
    audio_service.add_asset(footstep_sand_asset);
    registry.register_asset("footstep_sand".to_string(), footstep_sand_id);

    // Teleport enter
    let teleport_enter_asset = AudioAsset::new(
        "teleport_enter".to_string(),
        "assets/audio/sfx/movement/teleport_enter.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Movement,
    );
    let teleport_enter_id = teleport_enter_asset.id();
    audio_service.add_asset(teleport_enter_asset);
    registry.register_asset("teleport_enter".to_string(), teleport_enter_id);

    // Teleport exit
    let teleport_exit_asset = AudioAsset::new(
        "teleport_exit".to_string(),
        "assets/audio/sfx/movement/teleport_exit.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Movement,
    );
    let teleport_exit_id = teleport_exit_asset.id();
    audio_service.add_asset(teleport_exit_asset);
    registry.register_asset("teleport_exit".to_string(), teleport_exit_id);
}

/// Load dice-related audio assets
fn load_dice_assets(audio_service: &mut DefaultAudioService, registry: &mut AudioEventRegistry) {
    // Basic dice roll sound
    let dice_roll_asset = AudioAsset::new(
        "dice_roll".to_string(),
        "assets/audio/sfx/dice/dice_roll.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Dice,
    );
    let dice_roll_id = dice_roll_asset.id();
    audio_service.add_asset(dice_roll_asset);
    registry.register_asset("dice_roll".to_string(), dice_roll_id);

    // Critical success (nat 20) sound
    let dice_critical_success_asset = AudioAsset::new(
        "dice_critical_success".to_string(),
        "assets/audio/sfx/dice/dice_critical_success.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Dice,
    );
    let dice_critical_success_id = dice_critical_success_asset.id();
    audio_service.add_asset(dice_critical_success_asset);
    registry.register_asset(
        "dice_critical_success".to_string(),
        dice_critical_success_id,
    );

    // Critical failure (nat 1) sound
    let dice_critical_failure_asset = AudioAsset::new(
        "dice_critical_failure".to_string(),
        "assets/audio/sfx/dice/dice_critical_failure.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Dice,
    );
    let dice_critical_failure_id = dice_critical_failure_asset.id();
    audio_service.add_asset(dice_critical_failure_asset);
    registry.register_asset(
        "dice_critical_failure".to_string(),
        dice_critical_failure_id,
    );

    // High roll sound
    let dice_high_roll_asset = AudioAsset::new(
        "dice_high_roll".to_string(),
        "assets/audio/sfx/dice/dice_high_roll.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Dice,
    );
    let dice_high_roll_id = dice_high_roll_asset.id();
    audio_service.add_asset(dice_high_roll_asset);
    registry.register_asset("dice_high_roll".to_string(), dice_high_roll_id);

    // Low roll sound
    let dice_low_roll_asset = AudioAsset::new(
        "dice_low_roll".to_string(),
        "assets/audio/sfx/dice/dice_low_roll.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Dice,
    );
    let dice_low_roll_id = dice_low_roll_asset.id();
    audio_service.add_asset(dice_low_roll_asset);
    registry.register_asset("dice_low_roll".to_string(), dice_low_roll_id);
}

/// Load event-related audio assets
fn load_event_assets(audio_service: &mut DefaultAudioService, registry: &mut AudioEventRegistry) {
    // Resource discovery sound
    let resource_found_asset = AudioAsset::new(
        "resource_found".to_string(),
        "assets/audio/sfx/events/resource_found.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Events,
    );
    let resource_found_id = resource_found_asset.id();
    audio_service.add_asset(resource_found_asset);
    registry.register_asset("resource_found".to_string(), resource_found_id);

    // Rare resource found
    let rare_resource_asset = AudioAsset::new(
        "rare_resource".to_string(),
        "assets/audio/sfx/events/rare_resource.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Events,
    );
    let rare_resource_id = rare_resource_asset.id();
    audio_service.add_asset(rare_resource_asset);
    registry.register_asset("rare_resource".to_string(), rare_resource_id);

    // Crystal/energy resource sound
    let crystal_chime_asset = AudioAsset::new(
        "crystal_chime".to_string(),
        "assets/audio/sfx/events/crystal_chime.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Events,
    );
    let crystal_chime_id = crystal_chime_asset.id();
    audio_service.add_asset(crystal_chime_asset);
    registry.register_asset("crystal_chime".to_string(), crystal_chime_id);

    // Metal resource sound
    let metal_clank_asset = AudioAsset::new(
        "metal_clank".to_string(),
        "assets/audio/sfx/events/metal_clank.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Events,
    );
    let metal_clank_id = metal_clank_asset.id();
    audio_service.add_asset(metal_clank_asset);
    registry.register_asset("metal_clank".to_string(), metal_clank_id);

    // Organic resource sound
    let organic_squelch_asset = AudioAsset::new(
        "organic_squelch".to_string(),
        "assets/audio/sfx/events/organic_squelch.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Events,
    );
    let organic_squelch_id = organic_squelch_asset.id();
    audio_service.add_asset(organic_squelch_asset);
    registry.register_asset("organic_squelch".to_string(), organic_squelch_id);

    // Combat and encounter sounds
    let enemy_approach_asset = AudioAsset::new(
        "enemy_approach".to_string(),
        "assets/audio/sfx/events/enemy_approach.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Combat,
    );
    let enemy_approach_id = enemy_approach_asset.id();
    audio_service.add_asset(enemy_approach_asset);
    registry.register_asset("enemy_approach".to_string(), enemy_approach_id);

    let combat_hit_asset = AudioAsset::new(
        "combat_hit".to_string(),
        "assets/audio/sfx/events/combat_hit.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Combat,
    );
    let combat_hit_id = combat_hit_asset.id();
    audio_service.add_asset(combat_hit_asset);
    registry.register_asset("combat_hit".to_string(), combat_hit_id);

    let combat_miss_asset = AudioAsset::new(
        "combat_miss".to_string(),
        "assets/audio/sfx/events/combat_miss.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Combat,
    );
    let combat_miss_id = combat_miss_asset.id();
    audio_service.add_asset(combat_miss_asset);
    registry.register_asset("combat_miss".to_string(), combat_miss_id);

    let enemy_defeat_asset = AudioAsset::new(
        "enemy_defeat".to_string(),
        "assets/audio/sfx/events/enemy_defeat.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Combat,
    );
    let enemy_defeat_id = enemy_defeat_asset.id();
    audio_service.add_asset(enemy_defeat_asset);
    registry.register_asset("enemy_defeat".to_string(), enemy_defeat_id);

    let player_damage_asset = AudioAsset::new(
        "player_damage".to_string(),
        "assets/audio/sfx/events/player_damage.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Combat,
    );
    let player_damage_id = player_damage_asset.id();
    audio_service.add_asset(player_damage_asset);
    registry.register_asset("player_damage".to_string(), player_damage_id);

    // Rest and recovery sounds
    let rest_start_asset = AudioAsset::new(
        "rest_start".to_string(),
        "assets/audio/sfx/events/rest_start.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Events,
    );
    let rest_start_id = rest_start_asset.id();
    audio_service.add_asset(rest_start_asset);
    registry.register_asset("rest_start".to_string(), rest_start_id);

    // Rest completed successfully
    let rest_complete_asset = AudioAsset::new(
        "rest_complete".to_string(),
        "assets/audio/sfx/events/rest_complete.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Events,
    );
    let rest_complete_id = rest_complete_asset.id();
    audio_service.add_asset(rest_complete_asset);
    registry.register_asset("rest_complete".to_string(), rest_complete_id);

    let sleep_disturbed_asset = AudioAsset::new(
        "sleep_disturbed".to_string(),
        "assets/audio/sfx/events/sleep_disturbed.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Events,
    );
    let sleep_disturbed_id = sleep_disturbed_asset.id();
    audio_service.add_asset(sleep_disturbed_asset);
    registry.register_asset("sleep_disturbed".to_string(), sleep_disturbed_id);

    let health_restore_asset = AudioAsset::new(
        "health_restore".to_string(),
        "assets/audio/sfx/events/health_restore.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Events,
    );
    let health_restore_id = health_restore_asset.id();
    audio_service.add_asset(health_restore_asset);
    registry.register_asset("health_restore".to_string(), health_restore_id);
}

/// Load UI-related audio assets
fn load_ui_assets(audio_service: &mut DefaultAudioService, registry: &mut AudioEventRegistry) {
    // Button click sound
    let button_click_asset = AudioAsset::new(
        "button_click".to_string(),
        "assets/audio/sfx/ui/button_click.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::UI,
    );
    let button_click_id = button_click_asset.id();
    audio_service.add_asset(button_click_asset);
    registry.register_asset("button_click".to_string(), button_click_id);

    // Button hover sound
    let button_hover_asset = AudioAsset::new(
        "button_hover".to_string(),
        "assets/audio/sfx/ui/button_hover.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::UI,
    );
    let button_hover_id = button_hover_asset.id();
    audio_service.add_asset(button_hover_asset);
    registry.register_asset("button_hover".to_string(), button_hover_id);

    // Menu open sound
    let menu_open_asset = AudioAsset::new(
        "menu_open".to_string(),
        "assets/audio/sfx/ui/menu_open.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::UI,
    );
    let menu_open_id = menu_open_asset.id();
    audio_service.add_asset(menu_open_asset);
    registry.register_asset("menu_open".to_string(), menu_open_id);

    // Menu close sound
    let menu_close_asset = AudioAsset::new(
        "menu_close".to_string(),
        "assets/audio/sfx/ui/menu_close.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::UI,
    );
    let menu_close_id = menu_close_asset.id();
    audio_service.add_asset(menu_close_asset);
    registry.register_asset("menu_close".to_string(), menu_close_id);

    // General notification sound
    let notification_asset = AudioAsset::new(
        "notification".to_string(),
        "assets/audio/sfx/ui/notification.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::UI,
    );
    let notification_id = notification_asset.id();
    audio_service.add_asset(notification_asset);
    registry.register_asset("notification".to_string(), notification_id);

    // Warning notification sound
    let warning_asset = AudioAsset::new(
        "warning".to_string(),
        "assets/audio/sfx/ui/warning.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::UI,
    );
    let warning_id = warning_asset.id();
    audio_service.add_asset(warning_asset);
    registry.register_asset("warning".to_string(), warning_id);

    // Error sound
    let error_asset = AudioAsset::new(
        "error".to_string(),
        "assets/audio/sfx/ui/error.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::UI,
    );
    let error_id = error_asset.id();
    audio_service.add_asset(error_asset);
    registry.register_asset("error".to_string(), error_id);

    // Achievement sound
    let achievement_asset = AudioAsset::new(
        "achievement".to_string(),
        "assets/audio/sfx/ui/achievement.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::UI,
    );
    let achievement_id = achievement_asset.id();
    audio_service.add_asset(achievement_asset);
    registry.register_asset("achievement".to_string(), achievement_id);

    // Level up sound
    let level_up_asset = AudioAsset::new(
        "level_up".to_string(),
        "assets/audio/sfx/ui/level_up.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::UI,
    );
    let level_up_id = level_up_asset.id();
    audio_service.add_asset(level_up_asset);
    registry.register_asset("level_up".to_string(), level_up_id);
}

/// Load music assets
fn load_music_assets(audio_service: &mut DefaultAudioService, registry: &mut AudioEventRegistry) {
    // Ambient space exploration music
    let ambient_space_asset = AudioAsset::new(
        "ambient_space".to_string(),
        "assets/audio/music/ambient_space.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let ambient_space_id = ambient_space_asset.id();
    audio_service.add_asset(ambient_space_asset);
    registry.register_asset("ambient_space".to_string(), ambient_space_id);

    // Main menu theme
    let menu_theme_asset = AudioAsset::new(
        "menu_theme".to_string(),
        "assets/audio/music/menu_theme.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let menu_theme_id = menu_theme_asset.id();
    audio_service.add_asset(menu_theme_asset);
    registry.register_asset("menu_theme".to_string(), menu_theme_id);

    // Tension discovery music
    let tension_discovery_asset = AudioAsset::new(
        "tension_discovery".to_string(),
        "assets/audio/music/tension_discovery.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let tension_discovery_id = tension_discovery_asset.id();
    audio_service.add_asset(tension_discovery_asset);
    registry.register_asset("tension_discovery".to_string(), tension_discovery_id);

    // Combat encounter music
    let combat_encounter_asset = AudioAsset::new(
        "combat_encounter".to_string(),
        "assets/audio/music/combat_encounter.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let combat_encounter_id = combat_encounter_asset.id();
    audio_service.add_asset(combat_encounter_asset);
    registry.register_asset("combat_encounter".to_string(), combat_encounter_id);

    // Peaceful rest music
    let peaceful_rest_asset = AudioAsset::new(
        "peaceful_rest".to_string(),
        "assets/audio/music/peaceful_rest.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let peaceful_rest_id = peaceful_rest_asset.id();
    audio_service.add_asset(peaceful_rest_asset);
    registry.register_asset("peaceful_rest".to_string(), peaceful_rest_id);

    // Mystery ambient music
    let mystery_ambient_asset = AudioAsset::new(
        "mystery_ambient".to_string(),
        "assets/audio/music/mystery_ambient.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let mystery_ambient_id = mystery_ambient_asset.id();
    audio_service.add_asset(mystery_ambient_asset);
    registry.register_asset("mystery_ambient".to_string(), mystery_ambient_id);

    // Victory success music
    let victory_success_asset = AudioAsset::new(
        "victory_success".to_string(),
        "assets/audio/music/victory_success.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let victory_success_id = victory_success_asset.id();
    audio_service.add_asset(victory_success_asset);
    registry.register_asset("victory_success".to_string(), victory_success_id);

    // Adaptive music layers
    let base_layer_asset = AudioAsset::new(
        "base_layer".to_string(),
        "assets/audio/music/base_layer.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let base_layer_id = base_layer_asset.id();
    audio_service.add_asset(base_layer_asset);
    registry.register_asset("base_layer".to_string(), base_layer_id);

    let tension_layer_asset = AudioAsset::new(
        "tension_layer".to_string(),
        "assets/audio/music/tension_layer.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let tension_layer_id = tension_layer_asset.id();
    audio_service.add_asset(tension_layer_asset);
    registry.register_asset("tension_layer".to_string(), tension_layer_id);

    let discovery_layer_asset = AudioAsset::new(
        "discovery_layer".to_string(),
        "assets/audio/music/discovery_layer.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let discovery_layer_id = discovery_layer_asset.id();
    audio_service.add_asset(discovery_layer_asset);
    registry.register_asset("discovery_layer".to_string(), discovery_layer_id);

    let danger_layer_asset = AudioAsset::new(
        "danger_layer".to_string(),
        "assets/audio/music/danger_layer.ogg".to_string(),
        AudioAssetType::Music,
        AudioCategory::Music,
    );
    let danger_layer_id = danger_layer_asset.id();
    audio_service.add_asset(danger_layer_asset);
    registry.register_asset("danger_layer".to_string(), danger_layer_id);
}

/// Load environmental audio assets
fn load_environmental_assets(
    audio_service: &mut DefaultAudioService,
    registry: &mut AudioEventRegistry,
) {
    let wind_howl_asset = AudioAsset::new(
        "wind_howl".to_string(),
        "assets/audio/sfx/environmental/wind_howl.wav".to_string(),
        AudioAssetType::Ambient,
        AudioCategory::Environmental,
    );
    let wind_howl_id = wind_howl_asset.id();
    audio_service.add_asset(wind_howl_asset);
    registry.register_asset("wind_howl".to_string(), wind_howl_id);

    let energy_hum_asset = AudioAsset::new(
        "energy_hum".to_string(),
        "assets/audio/sfx/environmental/energy_hum.wav".to_string(),
        AudioAssetType::Ambient,
        AudioCategory::Environmental,
    );
    let energy_hum_id = energy_hum_asset.id();
    audio_service.add_asset(energy_hum_asset);
    registry.register_asset("energy_hum".to_string(), energy_hum_id);

    let machinery_whir_asset = AudioAsset::new(
        "machinery_whir".to_string(),
        "assets/audio/sfx/environmental/machinery_whir.wav".to_string(),
        AudioAssetType::Ambient,
        AudioCategory::Environmental,
    );
    let machinery_whir_id = machinery_whir_asset.id();
    audio_service.add_asset(machinery_whir_asset);
    registry.register_asset("machinery_whir".to_string(), machinery_whir_id);

    let cave_echo_asset = AudioAsset::new(
        "cave_echo".to_string(),
        "assets/audio/sfx/environmental/cave_echo.wav".to_string(),
        AudioAssetType::Ambient,
        AudioCategory::Environmental,
    );
    let cave_echo_id = cave_echo_asset.id();
    audio_service.add_asset(cave_echo_asset);
    registry.register_asset("cave_echo".to_string(), cave_echo_id);

    let space_silence_asset = AudioAsset::new(
        "space_silence".to_string(),
        "assets/audio/sfx/environmental/space_silence.wav".to_string(),
        AudioAssetType::Ambient,
        AudioCategory::Environmental,
    );
    let space_silence_id = space_silence_asset.id();
    audio_service.add_asset(space_silence_asset);
    registry.register_asset("space_silence".to_string(), space_silence_id);
}

/// Load resource management audio assets
fn load_resource_assets(
    audio_service: &mut DefaultAudioService,
    registry: &mut AudioEventRegistry,
) {
    let resource_gain_asset = AudioAsset::new(
        "resource_gain".to_string(),
        "assets/audio/sfx/resources/resource_gain.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Resources,
    );
    let resource_gain_id = resource_gain_asset.id();
    audio_service.add_asset(resource_gain_asset);
    registry.register_asset("resource_gain".to_string(), resource_gain_id);

    let resource_loss_asset = AudioAsset::new(
        "resource_loss".to_string(),
        "assets/audio/sfx/resources/resource_loss.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Resources,
    );
    let resource_loss_id = resource_loss_asset.id();
    audio_service.add_asset(resource_loss_asset);
    registry.register_asset("resource_loss".to_string(), resource_loss_id);

    let inventory_full_asset = AudioAsset::new(
        "inventory_full".to_string(),
        "assets/audio/sfx/resources/inventory_full.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Resources,
    );
    let inventory_full_id = inventory_full_asset.id();
    audio_service.add_asset(inventory_full_asset);
    registry.register_asset("inventory_full".to_string(), inventory_full_id);

    let craft_success_asset = AudioAsset::new(
        "craft_success".to_string(),
        "assets/audio/sfx/resources/craft_success.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Resources,
    );
    let craft_success_id = craft_success_asset.id();
    audio_service.add_asset(craft_success_asset);
    registry.register_asset("craft_success".to_string(), craft_success_id);

    let trade_complete_asset = AudioAsset::new(
        "trade_complete".to_string(),
        "assets/audio/sfx/resources/trade_complete.wav".to_string(),
        AudioAssetType::SoundEffect,
        AudioCategory::Resources,
    );
    let trade_complete_id = trade_complete_asset.id();
    audio_service.add_asset(trade_complete_asset);
    registry.register_asset("trade_complete".to_string(), trade_complete_id);
}

/// Get asset IDs for commonly used sounds
pub struct AudioAssetIds {
    // Movement
    pub movement_success: Uuid,
    pub movement_blocked: Uuid,
    pub footstep_metal: Uuid,
    pub footstep_rock: Uuid,
    pub footstep_sand: Uuid,
    pub teleport_enter: Uuid,
    pub teleport_exit: Uuid,

    // Dice
    pub dice_roll: Uuid,
    pub dice_critical_success: Uuid,
    pub dice_critical_failure: Uuid,
    pub dice_high_roll: Uuid,
    pub dice_low_roll: Uuid,

    // Events
    pub resource_found: Uuid,
    pub rare_resource: Uuid,
    pub crystal_chime: Uuid,
    pub metal_clank: Uuid,
    pub organic_squelch: Uuid,

    // Combat
    pub enemy_approach: Uuid,
    pub combat_hit: Uuid,
    pub combat_miss: Uuid,
    pub enemy_defeat: Uuid,
    pub player_damage: Uuid,

    // Rest
    pub rest_start: Uuid,
    pub rest_complete: Uuid,
    pub sleep_disturbed: Uuid,
    pub health_restore: Uuid,

    // UI
    pub button_click: Uuid,
    pub button_hover: Uuid,
    pub menu_open: Uuid,
    pub menu_close: Uuid,
    pub notification: Uuid,
    pub warning: Uuid,
    pub error: Uuid,
    pub achievement: Uuid,
    pub level_up: Uuid,

    // Music
    pub ambient_space: Uuid,
    pub menu_theme: Uuid,
    pub tension_discovery: Uuid,
    pub combat_encounter: Uuid,
    pub peaceful_rest: Uuid,
    pub mystery_ambient: Uuid,
    pub victory_success: Uuid,

    // Adaptive layers
    pub base_layer: Uuid,
    pub tension_layer: Uuid,
    pub discovery_layer: Uuid,
    pub danger_layer: Uuid,

    // Environmental
    pub wind_howl: Uuid,
    pub energy_hum: Uuid,
    pub machinery_whir: Uuid,
    pub cave_echo: Uuid,
    pub space_silence: Uuid,

    // Resources
    pub resource_gain: Uuid,
    pub resource_loss: Uuid,
    pub inventory_full: Uuid,
    pub craft_success: Uuid,
    pub trade_complete: Uuid,
}

impl AudioAssetIds {
    pub fn new(registry: &AudioEventRegistry) -> Self {
        Self {
            // Movement
            movement_success: registry
                .get_asset_id("movement_success")
                .unwrap_or_else(|| Uuid::new_v4()),
            movement_blocked: registry
                .get_asset_id("movement_blocked")
                .unwrap_or_else(|| Uuid::new_v4()),
            footstep_metal: registry
                .get_asset_id("footstep_metal")
                .unwrap_or_else(|| Uuid::new_v4()),
            footstep_rock: registry
                .get_asset_id("footstep_rock")
                .unwrap_or_else(|| Uuid::new_v4()),
            footstep_sand: registry
                .get_asset_id("footstep_sand")
                .unwrap_or_else(|| Uuid::new_v4()),
            teleport_enter: registry
                .get_asset_id("teleport_enter")
                .unwrap_or_else(|| Uuid::new_v4()),
            teleport_exit: registry
                .get_asset_id("teleport_exit")
                .unwrap_or_else(|| Uuid::new_v4()),

            // Dice
            dice_roll: registry
                .get_asset_id("dice_roll")
                .unwrap_or_else(|| Uuid::new_v4()),
            dice_critical_success: registry
                .get_asset_id("dice_critical_success")
                .unwrap_or_else(|| Uuid::new_v4()),
            dice_critical_failure: registry
                .get_asset_id("dice_critical_failure")
                .unwrap_or_else(|| Uuid::new_v4()),
            dice_high_roll: registry
                .get_asset_id("dice_high_roll")
                .unwrap_or_else(|| Uuid::new_v4()),
            dice_low_roll: registry
                .get_asset_id("dice_low_roll")
                .unwrap_or_else(|| Uuid::new_v4()),

            // Events
            resource_found: registry
                .get_asset_id("resource_found")
                .unwrap_or_else(|| Uuid::new_v4()),
            rare_resource: registry
                .get_asset_id("rare_resource")
                .unwrap_or_else(|| Uuid::new_v4()),
            crystal_chime: registry
                .get_asset_id("crystal_chime")
                .unwrap_or_else(|| Uuid::new_v4()),
            metal_clank: registry
                .get_asset_id("metal_clank")
                .unwrap_or_else(|| Uuid::new_v4()),
            organic_squelch: registry
                .get_asset_id("organic_squelch")
                .unwrap_or_else(|| Uuid::new_v4()),

            // Combat
            enemy_approach: registry
                .get_asset_id("enemy_approach")
                .unwrap_or_else(|| Uuid::new_v4()),
            combat_hit: registry
                .get_asset_id("combat_hit")
                .unwrap_or_else(|| Uuid::new_v4()),
            combat_miss: registry
                .get_asset_id("combat_miss")
                .unwrap_or_else(|| Uuid::new_v4()),
            enemy_defeat: registry
                .get_asset_id("enemy_defeat")
                .unwrap_or_else(|| Uuid::new_v4()),
            player_damage: registry
                .get_asset_id("player_damage")
                .unwrap_or_else(|| Uuid::new_v4()),

            // Rest
            rest_start: registry
                .get_asset_id("rest_start")
                .unwrap_or_else(|| Uuid::new_v4()),
            rest_complete: registry
                .get_asset_id("rest_complete")
                .unwrap_or_else(|| Uuid::new_v4()),
            sleep_disturbed: registry
                .get_asset_id("sleep_disturbed")
                .unwrap_or_else(|| Uuid::new_v4()),
            health_restore: registry
                .get_asset_id("health_restore")
                .unwrap_or_else(|| Uuid::new_v4()),

            // UI
            button_click: registry
                .get_asset_id("button_click")
                .unwrap_or_else(|| Uuid::new_v4()),
            button_hover: registry
                .get_asset_id("button_hover")
                .unwrap_or_else(|| Uuid::new_v4()),
            menu_open: registry
                .get_asset_id("menu_open")
                .unwrap_or_else(|| Uuid::new_v4()),
            menu_close: registry
                .get_asset_id("menu_close")
                .unwrap_or_else(|| Uuid::new_v4()),
            notification: registry
                .get_asset_id("notification")
                .unwrap_or_else(|| Uuid::new_v4()),
            warning: registry
                .get_asset_id("warning")
                .unwrap_or_else(|| Uuid::new_v4()),
            error: registry
                .get_asset_id("error")
                .unwrap_or_else(|| Uuid::new_v4()),
            achievement: registry
                .get_asset_id("achievement")
                .unwrap_or_else(|| Uuid::new_v4()),
            level_up: registry
                .get_asset_id("level_up")
                .unwrap_or_else(|| Uuid::new_v4()),

            // Music
            ambient_space: registry
                .get_asset_id("ambient_space")
                .unwrap_or_else(|| Uuid::new_v4()),
            menu_theme: registry
                .get_asset_id("menu_theme")
                .unwrap_or_else(|| Uuid::new_v4()),
            tension_discovery: registry
                .get_asset_id("tension_discovery")
                .unwrap_or_else(|| Uuid::new_v4()),
            combat_encounter: registry
                .get_asset_id("combat_encounter")
                .unwrap_or_else(|| Uuid::new_v4()),
            peaceful_rest: registry
                .get_asset_id("peaceful_rest")
                .unwrap_or_else(|| Uuid::new_v4()),
            mystery_ambient: registry
                .get_asset_id("mystery_ambient")
                .unwrap_or_else(|| Uuid::new_v4()),
            victory_success: registry
                .get_asset_id("victory_success")
                .unwrap_or_else(|| Uuid::new_v4()),

            // Adaptive layers
            base_layer: registry
                .get_asset_id("base_layer")
                .unwrap_or_else(|| Uuid::new_v4()),
            tension_layer: registry
                .get_asset_id("tension_layer")
                .unwrap_or_else(|| Uuid::new_v4()),
            discovery_layer: registry
                .get_asset_id("discovery_layer")
                .unwrap_or_else(|| Uuid::new_v4()),
            danger_layer: registry
                .get_asset_id("danger_layer")
                .unwrap_or_else(|| Uuid::new_v4()),

            // Environmental
            wind_howl: registry
                .get_asset_id("wind_howl")
                .unwrap_or_else(|| Uuid::new_v4()),
            energy_hum: registry
                .get_asset_id("energy_hum")
                .unwrap_or_else(|| Uuid::new_v4()),
            machinery_whir: registry
                .get_asset_id("machinery_whir")
                .unwrap_or_else(|| Uuid::new_v4()),
            cave_echo: registry
                .get_asset_id("cave_echo")
                .unwrap_or_else(|| Uuid::new_v4()),
            space_silence: registry
                .get_asset_id("space_silence")
                .unwrap_or_else(|| Uuid::new_v4()),

            // Resources
            resource_gain: registry
                .get_asset_id("resource_gain")
                .unwrap_or_else(|| Uuid::new_v4()),
            resource_loss: registry
                .get_asset_id("resource_loss")
                .unwrap_or_else(|| Uuid::new_v4()),
            inventory_full: registry
                .get_asset_id("inventory_full")
                .unwrap_or_else(|| Uuid::new_v4()),
            craft_success: registry
                .get_asset_id("craft_success")
                .unwrap_or_else(|| Uuid::new_v4()),
            trade_complete: registry
                .get_asset_id("trade_complete")
                .unwrap_or_else(|| Uuid::new_v4()),
        }
    }
}
